<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" label="METs"  width="775" height="412"
	addedToStage="{showEvent()}" initialize="{showEvent()}"   xmlns:ns1="com.hillelcoren.components.*" 
	xmlns:ns2="com.hillelcoren.components.autoComplete.classes.*">
	<mx:Script>
		<![CDATA[
			import mx.events.ListEvent;
			
			import org.alivepdf.annotations.Annotation;
			import org.alivepdf.annotations.AnnotationType;
			import org.alivepdf.annotations.TextAnnotation;
			import org.alivepdf.colors.CMYKColor;
			import org.alivepdf.colors.RGBColor;
			import org.alivepdf.colors.SpotColor;
			import org.alivepdf.data.Grid;
			import org.alivepdf.data.GridColumn;
			import org.alivepdf.events.CharacterEvent;
			import org.alivepdf.fonts.CodePage;
			import org.alivepdf.fonts.CoreFont;
			import org.alivepdf.fonts.EmbeddedFont;
			import org.alivepdf.fonts.FontFamily;
			import org.alivepdf.fonts.IFont;
			import org.alivepdf.images.ColorSpace;
			import org.alivepdf.layout.Align;
			import org.alivepdf.layout.Mode;
			import org.alivepdf.layout.Orientation;
			import org.alivepdf.layout.Position;
			import org.alivepdf.layout.Resize;
			import org.alivepdf.layout.Size;
			import org.alivepdf.layout.Unit;
			import org.alivepdf.links.HTTPLink;
			import org.alivepdf.links.Highlight;
			import org.alivepdf.links.ILink;
			import org.alivepdf.links.InternalLink;
			import org.alivepdf.pages.Page;
			import org.alivepdf.pdf.PDF;
			import org.alivepdf.saving.Method;
            
            
			import mx.events.CloseEvent;
			import clases.MET;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import flash.utils.Timer;
			
			[Bindable]
			private var listaCliente:ArrayCollection;
			private var c:Conexion = new Conexion;
			private var childrens:Array;
			private var urlStream:URLStream = new URLStream();
			private var fr:FileReference = new FileReference; 
			private var total:Number = 0; 
			 
			private function editarClick():void{
				this.disableButtons();
				if(listaGrid.selectedItem!=null){
					this.childrens = this.getChildren();
					removeAllChildren();
					var object:EditarCliente = new EditarCliente;
					//al obtener el objeto no se debe castear!
					var cliente:Object = listaCliente.getItemAt(listaGrid.selectedIndex);
					//Alert.show("grid index: "+listaGrid.selectedIndex+" lista size: "+listaMET.length+" rut met: "+met.rut);
					this.addChild(object );
					
					object.cargarCliente(cliente);
				}
				else{
					Alert.show("Error, primero debe seleccionar un elemento!.");
				}
			}
			public function nuevoClick():void{
				this.childrens = this.getChildren();
				removeAllChildren();
				var object:NuevoCliente = new NuevoCliente;
				this.addChild(object);
			}
			private function eliminarClick():void{
				this.disableButtons();
				if(listaGrid.selectedItem!=null)
					Alert.show("¿Desea realmente eliminar el registro?", "Confirmación", Alert.YES|Alert.NO, MetActivo.parent as Sprite, confirmHandler,null, Alert.NO);
				else{
					Alert.show("Error, primero debe seleccionar un elemento!.");
				}
			}
			private function confirmHandler(event:CloseEvent):void {
				if (event.detail == Alert.YES) {
					var cliente:Object = listaCliente.getItemAt(listaGrid.selectedIndex);
					
					c.deleteCliente(cliente.rut);
					var minuteTimer:Timer = new Timer(1000, 1);
					minuteTimer.addEventListener(TimerEvent.TIMER_COMPLETE, onTimerComplete);
					minuteTimer.start();
					
				}
			}
			private function onTimerComplete(event:TimerEvent):void{
            	showEvent();
        	}
			public function showVerTodos():void{
				removeAllChildren();
				//vuelve a insertar todos los hijos guardados
				var i:int;
				for(i=0;i<childrens.length;i++){
					this.addChild(childrens[i]);
				}
				//llama al evento que obtiene todos los mets de la bd
				showEvent();
			}
			
			private function showEvent():void{
				var c:Conexion = new Conexion;
				var flag:int = 0;//0 lista normal, 1: lista con el primer elemento:"--seleccione--"
				listaCliente = c.getAllCliente(flag);
				if(MetActivo.permiso=="Usuario"){
					this.listaGrid.selectable=false;
					this.listaGrid.doubleClickEnabled=false;
					this.nuevoButton.enabled=false;
					this.listaGrid.addEventListener(ListEvent.ITEM_CLICK,null);
				}
				else{
					this.listaGrid.selectable=true;
					this.listaGrid.doubleClickEnabled=true;
					this.nuevoButton.enabled=true;
					this.listaGrid.addEventListener(ListEvent.ITEM_CLICK,enableButtons());
					
				}
				this.disableButtons();
			}
			private function printEvent():void{
				this.listaGrid.selectedIndex=-1;
				this.disableButtons();
				var p:PDF = new PDF( Orientation.PORTRAIT, Unit.MM, Size.A4 );
				
				p.addPage();				
				p.addImage( this.listaGrid, new Resize ( Mode.FIT_TO_PAGE, Position.CENTERED ) );
				
				var archivo:FileReference = new FileReference;
				archivo.save(p.save(Method.LOCAL), "Lista METs.pdf");
				
			}
			private function enableButtons():Function{
				this.editarButton.enabled=true;
				this.eliminarButton.enabled=true;
				this.descargarButton.enabled=true;
				MetActivo.rutSeleccionado = listaCliente.getItemAt(this.listaGrid.selectedIndex).rut;
				return null;
			}
			private function disableButtons():void{
				this.editarButton.enabled=false;
				this.eliminarButton.enabled=false;
				this.descargarButton.enabled=false;
			}
			private function descargarClick():void{
				if(this.listaGrid.selectedIndex==0)
					this.disableButtons();
				var request:URLRequest = new URLRequest(); 
                request.url = "http://www.kimen.cl/amfphp/services/uploads/archivos_"+MetActivo.rutSeleccionado+".rar";
                
                var fr:FileReference = new FileReference; 
                fr.addEventListener(ProgressEvent.PROGRESS, progressHandler);  
                fr.addEventListener(Event.COMPLETE, completeHandler);  
                fr.download(request); 
                
                /*
                
                urlStream.addEventListener(Event.COMPLETE, loaded); 
				urlStream.addEventListener(ProgressEvent.PROGRESS, writeFile); 
				
				urlStream.load(request);
				
                var data:ByteArray = new ByteArray(); 
					urlStream.readBytes(data, 0, urlStream.bytesAvailable); 
					fr.data.writeBytes(data, total - urlStream.bytesAvailable, data.length); 
                fr.save(data,"archivos_");
                
                */
                
			}
			
			private function progressHandler(event:ProgressEvent):void {  
            	progressBar.setProgress(event.bytesLoaded, event.bytesTotal);
            	var porcentaje:Number = (Math.round((event.bytesLoaded/event.bytesTotal) * 100) );
            	progressBar.label = "Descargando " +porcentaje + "%";  
       		 }
			private function completeHandler(event:Event):void {  
	            // loadedStatus = true;  
	            //progressBar.setProgress(0, 100);  
	            //btn.enabled = false;  
	            progressBar.label = "Descarga completa"  
	         	if(this.listaGrid.selectedIndex==0)
					this.disableButtons();
	  
        	}    
       		/*
       		private function writeFile(event:ProgressEvent):void { 
       			if(total==0)
       				total = urlStream.bytesAvailable;
				// only write every 50k or so downloaded 
				
				///Alert.show("entra1 aviable:    "+ urlStream.bytesAvailable );
				if (urlStream.bytesAvailable > 51200) { 
						//Alert.show("entra1");
					// Read the buffer into a ByteArray and write it to disk 
					
					var data:ByteArray = new ByteArray(); 
					urlStream.readBytes(data, 0, urlStream.bytesAvailable); 
					fr.data.writeBytes(data, event.bytesTotal - urlStream.bytesAvailable, data.length); 
					}
				progressBar.setProgress(event.bytesLoaded, event.bytesTotal);
            	var porcentaje:Number = Math.round((event.bytesLoaded/event.bytesTotal) * 100) ;
            	progressBar.label = "Descargando " +porcentaje + "%";   
				} 
				
				private function loaded(event:Event):void { 
				// Write any remaining data to the file before closing it 
				//fr.save("asddd","asd.txt")
				//Alert.show("termino!");
				progressBar.setProgress(100, 100);
            	progressBar.label = "Descarga completa";   
            	//fr.save(data,"asd");
                //fr.save(data,"archivos_"+MetActivo.rutSeleccionado+".rar");
               
				} 
        	*/
        	private function fichaClick():void{
        		this.childrens = this.getChildren();
				removeAllChildren();
				var ficha:FichaMET = new FichaMET;
				//this.addChild(ficha);
				ficha.setData(this.listaCliente.getItemAt(listaGrid.selectedIndex));
				ficha.doPDF();
        	}
        	
		]]>
	</mx:Script>
	<mx:DataGrid x="10" y="37" width="755" height="335" id="listaGrid" dataProvider="{listaCliente}"
		doubleClick="{editarClick()}" >
		<mx:columns>
			<mx:DataGridColumn headerText="Nombre" dataField="nombre" width="120"/>
			<mx:DataGridColumn headerText="Rut" dataField="rut" width="80"/>
			<mx:DataGridColumn headerText="Giro/Actividad" dataField="giro" width="150"/>
			<mx:DataGridColumn headerText="e-mail" dataField="email" width="80"/>
		</mx:columns>
	</mx:DataGrid>
	<mx:Text x="10" y="10" text="Lista con todos los Clientes registrados" fontSize="11"/>
	<mx:Button x="269" y="380" label="Actualizar tabla" id="actualizarButton" click="{showEvent()}"/>
	<mx:Button x="152" y="380" label="Imprimir tabla" id="imprimirButton" click="{printEvent()}"/>
	<mx:Button x="393" y="380" label="Ficha" id="editarButton" click="{fichaClick()}" enabled="false"/>
	<mx:Button x="703" y="380" label="Nuevo" id="nuevoButton" click="{nuevoClick()}"/>
	<mx:Button x="623" y="380" label="Eliminar" id="eliminarButton" click="{eliminarClick()}" enabled="false"/>
	<mx:Button x="457" y="380" label="Descargar documentos" id="descargarButton" click="{descargarClick()}" enabled="false"/>
	<mx:Text x="555" y="11" text="Buscar por rut:"/>
	<ns1:AdvancedAutoComplete x="655" y="10" width="110" dataProvider="{listaCliente}" labelField="rut"
		prompt="Ingrese rut" allowMultipleSelection="false" />
	<mx:ProgressBar x="10" y="380" width="130" id="progressBar" mode="manual" label="Descarga 0%"/>
</mx:Canvas>