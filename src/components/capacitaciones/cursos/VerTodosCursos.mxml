<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" label="METs"  width="775" height="412"
	addedToStage="{showEvent()}" initialize="{showEvent()}"  xmlns:ns1="com.hillelcoren.components.*" 
	xmlns:ns2="com.hillelcoren.components.autoComplete.classes.*" x="10" y="28">
	<mx:Script>
	<![CDATA[
		import mx.managers.PopUpManager;
			
		import org.alivepdf.annotations.Annotation;
			import org.alivepdf.annotations.AnnotationType;
			import org.alivepdf.annotations.TextAnnotation;
			import org.alivepdf.colors.CMYKColor;
			import org.alivepdf.colors.RGBColor;
			import org.alivepdf.colors.SpotColor;
			import org.alivepdf.data.Grid;
			import org.alivepdf.data.GridColumn;
			import org.alivepdf.events.CharacterEvent;
			import org.alivepdf.fonts.CodePage;
			import org.alivepdf.fonts.CoreFont;
			import org.alivepdf.fonts.EmbeddedFont;
			import org.alivepdf.fonts.FontFamily;
			import org.alivepdf.fonts.IFont;
			import org.alivepdf.images.ColorSpace;
			import org.alivepdf.layout.Align;
			import org.alivepdf.layout.Mode;
			import org.alivepdf.layout.Orientation;
			import org.alivepdf.layout.Position;
			import org.alivepdf.layout.Resize;
			import org.alivepdf.layout.Size;
			import org.alivepdf.layout.Unit;
			import org.alivepdf.links.HTTPLink;
			import org.alivepdf.links.Highlight;
			import org.alivepdf.links.ILink;
			import org.alivepdf.links.InternalLink;
			import org.alivepdf.pages.Page;
			import org.alivepdf.pdf.PDF;
			import org.alivepdf.saving.Method;
            
            
			import mx.events.CloseEvent;
			import clases.MET;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import flash.utils.Timer;
			
			[Bindable]
			private var listaCursos:ArrayCollection;
			[Bindable]
			private var listaMET:ArrayCollection;
			private var c:Conexion = new Conexion;
			private var childrens:Array;
			private var urlStream:URLStream = new URLStream();
			private var fr:FileReference = new FileReference; 
			private var total:Number = 0; 
			 
			private function editarClick():void{
				this.disableButtons();
				if(listaGrid.selectedItem!=null){
					this.childrens = this.getChildren();
					removeAllChildren();
					var object:EditarCurso = new EditarCurso;
					//al obtener el objeto no se debe castear!
					var curso:Object = listaCursos.getItemAt(listaGrid.selectedIndex);
					//Alert.show("grid index: "+listaGrid.selectedIndex+" lista size: "+listaMET.length+" rut met: "+met.rut);
					
					this.addChild(object );
					object.cargarCurso(curso, listaMET);
					
				}
				else{
					Alert.show("Error, primero debe seleccionar un elemento!.");
				}
			}
			public function nuevoClick():void{
				this.childrens = this.getChildren();
				removeAllChildren();
				var object:NuevoCurso = new NuevoCurso;
				this.addChild(object);
			}
			private function eliminarClick():void{
				this.disableButtons();
				if(listaGrid.selectedItem!=null)
					Alert.show("¿Desea realmente eliminar el registro?", "Confirmación", Alert.YES|Alert.NO, MetActivo.parent as Sprite, confirmHandler,null, Alert.NO);
				else{
					Alert.show("Error, primero debe seleccionar un elemento!.");
				}
			}
			private function confirmHandler(event:CloseEvent):void {
				if (event.detail == Alert.YES) {
					var curso:Object = listaCursos.getItemAt(listaGrid.selectedIndex);
					
					c.deleteCurso(curso.codigo_interno);
					var minuteTimer:Timer = new Timer(1000, 2);
					minuteTimer.addEventListener(TimerEvent.TIMER_COMPLETE, onTimerComplete);
					minuteTimer.start();
					
				}
			}
			private function onTimerComplete(event:TimerEvent):void{
            	showEvent();
        	}
			public function showVerTodos():void{
				removeAllChildren();
				//vuelve a insertar todos los hijos guardados
				var i:int;
				for(i=0;i<childrens.length;i++){
					this.addChild(childrens[i]);
				}
				//llama al evento que obtiene todos los mets de la bd
				showEvent();
			}
			
			public function showEvent():void{
				listaCursos = new ArrayCollection;
				var c:Conexion = new Conexion;
				listaCursos = c.getAllCurso();
				listaMET = c.getAllMets();
				this.disableButtons();
				if(MetActivo.permiso=="Usuario"){
					this.nuevoButton.enabled = false;
					this.listaGrid.editable = false;
					this.listaGrid.selectable = false;
				}
			}
			private function printEvent():void{
				this.listaGrid.selectedIndex=-1;
				this.disableButtons();
				var p:PDF = new PDF( Orientation.PORTRAIT, Unit.MM, Size.A4 );
				
				p.addPage();				
				p.addImage( this.listaGrid, new Resize ( Mode.FIT_TO_PAGE, Position.CENTERED ) );
				
				var archivo:FileReference = new FileReference;
				archivo.save(p.save(Method.LOCAL), "Lista METs.pdf");
				
			}
			private function enableButtons():void{
				this.eliminarButton.enabled=true;

				MetActivo.rutSeleccionado = listaCursos.getItemAt(this.listaGrid.selectedIndex).codigo_interno;
			}
			private function disableButtons():void{
				this.eliminarButton.enabled=false;
			}
			
			private function progressHandler(event:ProgressEvent):void {  
            	progressBar.setProgress(event.bytesLoaded, event.bytesTotal);
            	var porcentaje:Number = (Math.round((event.bytesLoaded/event.bytesTotal) * 100) );
            	progressBar.label = "Descargando " +porcentaje + "%";  
       		 }
			private function completeHandler(event:Event):void {  
	            progressBar.label = "Descarga completa"  
	         	if(this.listaGrid.selectedIndex==0)
					this.disableButtons();
	  
        	}    
        	private function fichaClick():void{
        		/*
        		this.childrens = this.getChildren();
				removeAllChildren();
				var ficha:FichaMET = new FichaMET;
				this.addChild(ficha);
				ficha.setData(this.listaMET.getItemAt(listaGrid.selectedIndex));
				*/
        	}
        	
		]]>
	</mx:Script>
		<mx:DataGrid x="10" y="37" width="755" height="335" id="listaGrid" dataProvider="{listaCursos}"
			 doubleClickEnabled="true" doubleClick="{editarClick()}" itemClick="{enableButtons()}"
			   >
			<mx:columns>
				<mx:DataGridColumn headerText="Código Interno" dataField="codigo_interno" width="70"/>
				<mx:DataGridColumn headerText="Nombre" dataField="nombre" width="100"/>
				<mx:DataGridColumn headerText="Fecha ejecución" dataField="fecha_ejecucion" width="70"/>
				<mx:DataGridColumn headerText="Dirección" dataField="direccion" width="80"/>
				<mx:DataGridColumn headerText="Lugar" dataField="lugar" width="60"/>
				<mx:DataGridColumn headerText="Participantes" dataField="num_participantes" width="60"/>
				<mx:DataGridColumn headerText="Estado" dataField="estado" width="50"/>
				
			</mx:columns>
		</mx:DataGrid>
		<mx:Text x="10" y="10" text="Lista con todos los Cursos" fontSize="11"/>
		<mx:Button x="499" y="380" label="Actualizar tabla" id="actualizarButton" click="{showEvent()}"/>
		<mx:Button x="382" y="380" label="Imprimir tabla" id="imprimirButton" click="{printEvent()}"/>
		<mx:Button x="703" y="380" label="Nuevo" id="nuevoButton" click="{nuevoClick()}"/>
		<mx:Button x="623" y="380" label="Eliminar" id="eliminarButton" click="{eliminarClick()}" enabled="false"/>
		<mx:Text x="496" y="11" text="Buscar por código interno:"/>
		<ns1:AdvancedAutoComplete x="655" y="10" width="110" dataProvider="{listaCursos}" labelField="codigo_interno"
			prompt="Ingrese código" allowMultipleSelection="false" />
		<mx:ProgressBar x="10" y="380" width="130" id="progressBar" mode="manual" label="Descarga 0%"/>

	
</mx:Canvas>
